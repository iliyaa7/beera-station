// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target i386-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name idenfyNFCReading
import CommonCrypto
import CoreNFC
import CryptoKit
import CryptoTokenKit
import Foundation
import Swift
import UIKit
@_exported import idenfyNFCReading
public enum PassportAuthenticationStatus {
  case notDone
  case success
  case failed
  public static func == (a: idenfyNFCReading.PassportAuthenticationStatus, b: idenfyNFCReading.PassportAuthenticationStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
public class NFCPassportModel {
  public var dataGroupsReadBytes: [idenfyNFCReading.DataGroupId : [Swift.UInt8]] {
    get
  }
  public var BACStatus: idenfyNFCReading.PassportAuthenticationStatus {
    get
  }
  public var dg1: Swift.String? {
    get
  }
  public var dg2: Swift.String? {
    get
  }
  public var dg11: Swift.String? {
    get
  }
  public var dg12: Swift.String? {
    get
  }
  public var dg14: Swift.String? {
    get
  }
  public var dg15: Swift.String? {
    get
  }
  public var com: Swift.String? {
    get
  }
  public var sod: Swift.String? {
    get
  }
  public init()
  public func addDataGroupBytes(_ id: idenfyNFCReading.DataGroupId, dataGroup: [Swift.UInt8])
  @objc deinit
}
@objc @available(iOS 13, *)
public class PassportReader : ObjectiveC.NSObject {
  weak public var delegate: idenfyNFCReading.NFCConnectionDelegate?
  public var shouldRetrySession: Swift.Bool
  public init(logLevel: idenfyNFCReading.LogLevel = .info)
  public func stopReading()
  public func readPassport(mrzKey: Swift.String, tags: [idenfyNFCReading.DataGroupId] = [], customDisplayMessage: ((idenfyNFCReading.NFCViewDisplayMessage) -> Swift.String?)? = nil, completed: @escaping (idenfyNFCReading.NFCPassportModel?, Swift.String?) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@available(iOS 13, *)
extension PassportReader : CoreNFC.NFCTagReaderSessionDelegate {
  public func tagReaderSessionDidBecomeActive(_: CoreNFC.NFCTagReaderSession)
  public func tagReaderSession(_: CoreNFC.NFCTagReaderSession, didInvalidateWithError error: Swift.Error)
  public func tagReaderSession(_ session: CoreNFC.NFCTagReaderSession, didDetect tags: [CoreNFC.NFCTag])
}
public enum SecureMessagingSupportedAlgorithms {
  case DES
  case AES
  public static func == (a: idenfyNFCReading.SecureMessagingSupportedAlgorithms, b: idenfyNFCReading.SecureMessagingSupportedAlgorithms) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 13, *)
public class SecureMessaging {
  public init(encryptionAlgorithm: idenfyNFCReading.SecureMessagingSupportedAlgorithms = .DES, ksenc: [Swift.UInt8], ksmac: [Swift.UInt8], ssc: [Swift.UInt8])
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class DataGroup {
  public var datagroupType: idenfyNFCReading.DataGroupId
  public var body: [Swift.UInt8] {
    get
  }
  public var data: [Swift.UInt8] {
    get
  }
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public func AESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func AESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func AESECBEncrypt(key: [Swift.UInt8], message: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func tripleDESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func tripleDESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func DESEncrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8], options: Swift.UInt32 = 0) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func DESDecrypt(key: [Swift.UInt8], message: [Swift.UInt8], iv: [Swift.UInt8], options: Swift.UInt32 = 0) -> [Swift.UInt8]
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 13, macOS 10.15, *)
public class COM : idenfyNFCReading.DataGroup {
  public var version: Swift.String {
    get
  }
  public var unicodeVersion: Swift.String {
    get
  }
  public var dataGroupsPresent: [Swift.String] {
    get
  }
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public enum NFCPassportReaderError : Swift.Error {
  case ResponseError(Swift.String, Swift.UInt8, Swift.UInt8)
  case InvalidResponse
  case UnexpectedError
  case NFCNotSupported
  case NoConnectedTag
  case TagConnectionLost
  case D087Malformed
  case InvalidResponseChecksum
  case MissingMandatoryFields
  case CannotDecodeASN1Length
  case InvalidASN1Value
  case UnableToProtectAPDU
  case UnableToUnprotectAPDU
  case UnsupportedDataGroup
  case DataGroupNotRead
  case UnknownTag
  case UnknownImageFormat
  case NotImplemented
  case TagNotValid
  case ConnectionError
  case UserCanceled
  case InvalidMRZKey
  case MoreThanOneTagFound
  case InvalidHashAlgorithmSpecified
  case InvalidDataPassed(Swift.String)
  case NotYetSupported(Swift.String)
  public var value: Swift.String {
    get
  }
}
@available(iOS 13, macOS 10.15, *)
extension NFCPassportReaderError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public func binToHexRep(_ val: [Swift.UInt8], asArray: Swift.Bool = false) -> Swift.String
public func binToHexRep(_ val: Swift.UInt8) -> Swift.String
public func binToHex(_ val: Swift.UInt8) -> Swift.Int
public func binToHex(_ val: [Swift.UInt8]) -> Swift.UInt64
public func binToHex(_ val: Swift.ArraySlice<Swift.UInt8>) -> Swift.UInt64
public func intToBin(_ data: Swift.Int, pad: Swift.Int = 2) -> [Swift.UInt8]
public func hexRepToBin(_ val: Swift.String) -> [Swift.UInt8]
public func xor(_ kifd: [Swift.UInt8], _ response_kicc: [Swift.UInt8]) -> [Swift.UInt8]
public func generateRandomUInt8Array(_ size: Swift.Int) -> [Swift.UInt8]
public func pad(_ toPad: [Swift.UInt8], blockSize: Swift.Int) -> [Swift.UInt8]
public func unpad(_ tounpad: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func mac(algoName _: idenfyNFCReading.SecureMessagingSupportedAlgorithms, key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func desMAC(key: [Swift.UInt8], msg: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func wrapDO(b: Swift.UInt8, arr: [Swift.UInt8]) -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func unwrapDO(tag: Swift.UInt8, wrappedData: [Swift.UInt8]) throws -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func asn1Length(_ data: Swift.ArraySlice<Swift.UInt8>) throws -> (Swift.Int, Swift.Int)
@available(iOS 13, macOS 10.15, *)
public func asn1Length(_ data: [Swift.UInt8]) throws -> (Swift.Int, Swift.Int)
@available(iOS 13, macOS 10.15, *)
public func toAsn1Length(_ data: Swift.Int) throws -> [Swift.UInt8]
@available(iOS 13, macOS 10.15, *)
public func calcSHA1Hash(_ data: [Swift.UInt8]) -> [Swift.UInt8]
public protocol NFCConnectionDelegate : AnyObject {
  func connectionFound()
  func connectionLost()
}
@_hasMissingDesignatedInitializers @available(iOS 13, *)
public class TagReader {
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public struct DataGroupHash {
  public var id: Swift.String
  public var sodHash: Swift.String
  public var computedHash: Swift.String
  public var match: Swift.Bool
}
@available(iOS 13, *)
public class BACHandler {
  public var ksenc: [Swift.UInt8]
  public var ksmac: [Swift.UInt8]
  public var kifd: [Swift.UInt8]
  public init()
  public init(tagReader: idenfyNFCReading.TagReader)
  public func performBACAndGetSessionKeys(mrzKey: Swift.String, completed: @escaping (idenfyNFCReading.NFCPassportReaderError?) -> Swift.Void)
  public func sessionKeys(data: [Swift.UInt8]) throws -> ([Swift.UInt8], [Swift.UInt8], [Swift.UInt8])
  @objc deinit
}
public enum LogLevel : Swift.Int, Swift.CaseIterable {
  case verbose
  case debug
  case info
  case warning
  case error
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [idenfyNFCReading.LogLevel]
  public typealias RawValue = Swift.Int
  public static var allCases: [idenfyNFCReading.LogLevel] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class Log {
  public static var logLevel: idenfyNFCReading.LogLevel
  public static var storeLogs: Swift.Bool
  public static var logData: [Swift.String]
  public class func verbose(_ msg: @autoclosure () -> Swift.String)
  public class func debug(_ msg: @autoclosure () -> Swift.String)
  public class func info(_ msg: @autoclosure () -> Swift.String)
  public class func warning(_ msg: @autoclosure () -> Swift.String)
  public class func error(_ msg: @autoclosure () -> Swift.String)
  public class func clearStoredLogs()
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public enum DataGroupId : Swift.Int, Swift.CaseIterable {
  case COM
  case DG1
  case DG2
  case DG3
  case DG4
  case DG5
  case DG6
  case DG7
  case DG8
  case DG9
  case DG10
  case DG11
  case DG12
  case DG13
  case DG14
  case DG15
  case DG16
  case SOD
  case Unknown
  public func getName() -> Swift.String
  public static func getIDFromName(name: Swift.String) -> idenfyNFCReading.DataGroupId
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [idenfyNFCReading.DataGroupId]
  public typealias RawValue = Swift.Int
  public static var allCases: [idenfyNFCReading.DataGroupId] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOS 13, *)
public struct ResponseAPDU {
  public var data: [Swift.UInt8]
  public var sw1: Swift.UInt8
  public var sw2: Swift.UInt8
  public init(data: [Swift.UInt8], sw1: Swift.UInt8, sw2: Swift.UInt8)
}
@available(iOS 13, macOS 10.15, *)
public enum NFCViewDisplayMessage {
  case requestPresentPassport
  case authenticatingWithPassport(Swift.Int)
  case readingDataGroupProgress(idenfyNFCReading.DataGroupId, Swift.Int)
  case error(idenfyNFCReading.NFCPassportReaderError)
  case successfulRead
}
@available(iOS 13, macOS 10.15, *)
extension NFCViewDisplayMessage {
  public var description: Swift.String {
    get
  }
}
extension idenfyNFCReading.PassportAuthenticationStatus : Swift.Equatable {}
extension idenfyNFCReading.PassportAuthenticationStatus : Swift.Hashable {}
extension idenfyNFCReading.SecureMessagingSupportedAlgorithms : Swift.Equatable {}
extension idenfyNFCReading.SecureMessagingSupportedAlgorithms : Swift.Hashable {}
extension idenfyNFCReading.LogLevel : Swift.Equatable {}
extension idenfyNFCReading.LogLevel : Swift.Hashable {}
extension idenfyNFCReading.LogLevel : Swift.RawRepresentable {}
@available(iOS 13, macOS 10.15, *)
extension idenfyNFCReading.DataGroupId : Swift.Equatable {}
@available(iOS 13, macOS 10.15, *)
extension idenfyNFCReading.DataGroupId : Swift.Hashable {}
@available(iOS 13, macOS 10.15, *)
extension idenfyNFCReading.DataGroupId : Swift.RawRepresentable {}
